{"title":"Api Rest: Crear una Api Rest con Asp.Net MVC y C#","slug":"Crear-una-Api-Rest-con-AspNet-MVC-y-CSharp","html":"<figcaption>Ilustración Gracias a <a href=\"https://www.freepik.com/free-photos-vectors/banner\" target=\"_blank\">upklyak - www.freepik.com</a></figcaption>\n\n<h2 id=\"¿qué-es-una-api-rest\">¿Qué es una API Rest?</h2>\n<p>Una API REST es una arquitectura de Software BackEnd que se apoya en el estándar\nHTTP, que permite crear aplicaciones y servicios que pueden ser usados desde\ncualquier dispositivo o cliente que utilice HTTP.</p>\n<p>Los datos obtenidos pueden ser XML o JSON que suele ser más rápido.</p>\n<p>Las operaciones más importantes es el denominado <strong>CRUD (Crear, Consultar,\nModificar, Eliminar)</strong>):</p>\n<ul>\n<li>GET (Leer y consultar los registros)</li>\n<li>POST (Crear nuevos registros)</li>\n<li>PUT (Editar y modificar los registros)</li>\n<li>DELETE (Eliminar los registros)</li>\n</ul>\n<p>La principal ventaja de las API REST es que podemos desarrollar una API en el\nbackend y utilizarla en cualquier dispositivo, ahorrando así mucho tiempo de\ndesarrollo, estas API son capaces de contestas las llamadas desde una serie de\nURLs en formato JSON y también pueden recibir datos en formato JSON para\ngestionar la información que le enviemos.</p>\n<p>Tratere que al finalizar este artículo puedas comprender de forma más clara este\nconcepto.</p>\n<p>Para este ejemplo necesitaremos tener instalado lo siguiente:</p>\n<ul>\n<li>Visual Studio 2019</li>\n<li>Postman</li>\n<li>Base de Datos (Para este ejemplo necesitaremos una base de datos con al\nmenos una tabla que será llamada para realizar nuestro <strong>CRUD (Crear,\nConsultar, Modificar, Eliminar)</strong>).</li>\n</ul>\n<blockquote>\n<p>Nota: para este ejemplo ocuparemos una Base de Datos <strong>&quot;POS&quot;</strong> alojada en un\nservidor AZURE.</p>\n</blockquote>\n<h2 id=\"creando-nuestro-proyecto-web\">Creando nuestro proyecto Web</h2>\n<p>Lo primero es crear un nuevo proyecto en Visual Studio, como se muestra en la\nsiguiente imagen.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/1-RestApi.png\" alt=\"CrearProyecto1\"></p>\n<p>A continuación vamos a seleccionar <strong>Aplicacion web ASP.NET (.NET Framework)</strong>,\ncomo se muestra en la imagen siguiente:</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/2-RestApi.png\" alt=\"Proyecto1\"></p>\n<blockquote>\n<p>Nota: Asegurate se que el proyecto seleccionado sea del tipo C#, por que\npuedes confundirte con un proyecto del tipo VisualBasic</p>\n</blockquote>\n<p>Configuramos el nombre de nuestro proyecto, asi como la ubicación del mismo.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/3-RestApi.png\" alt=\"configurarProyecto\"></p>\n<p>A continuación seleccionaremos el template o plantilla API Web.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/4-RestApi.png\" alt=\"template\"></p>\n<p>Una vez terminado el proceso, se mostrara una pantalla de información a ASP.NET.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/5-RestApi.png\" alt=\"newProyecto\"></p>\n<h2 id=\"agregando-proyecto-de-acceso-a-datos\">Agregando proyecto de Acceso a Datos</h2>\n<p>Agregamos un nuevo proyecto donde realizaremos la conexion a la Base de Datos\ncomo se muestra a continuación: <strong>Seleccionamos el nombre de la Solución &gt; Click\nderecho sobre el proyecto &gt; Agregar &gt; Nuevo proyecto.</strong></p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/6-RestApi.png\" alt=\"addProyecto\"></p>\n<p>El nuevo proyecto será del tipo biblioteca de clases, para esto podemos hacer\nuso del control de busqueda de plantilla teclear <strong>&quot;Biblioteca de Clases&quot;</strong> en\ncual nos mostrara el proyecto que vamos a ocupar.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/7-RestApi.png\" alt=\"Proyecto2\"></p>\n<blockquote>\n<p>Nota: Asegurate se que el proyecto seleccionado sea del tipo C#, por que\npuedes confundirte con un proyecto del tipo VisualBasic</p>\n</blockquote>\n<p>Configuramos el nombre de nuestro proyecto en este caso será <strong>AccesoDatos</strong>,\npor defecto dejaremos la misma ubicación del proyecto.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/8-RestApi.png\" alt=\"nombreProyecto2\"></p>\n<p>Una vez que se ha creado nuestro segundo proyecto podemos ver los dos proyectos\nen la misma solución como se muestra en la siguiente imagen.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/8-1-RestApi.png\" alt=\"ambosProyectos\"></p>\n<blockquote>\n<p>Nota: Podemos eliminar la Class1.cs ya que no la necesitamos para este\nejemplo.</p>\n</blockquote>\n<p>A continuación procedemos a agregar un nuevo elemento como semuestra a\ncontinuación: <strong>Seleccionamos el nombre del proyecto &quot;AccesoDatos&quot; &gt; Click\nderecho sobre el proyecto &gt; Agregar &gt; Nuevo elemento.</strong></p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/9-RestApi.png\" alt=\"agregaModel\"></p>\n<p>El elemento que vamos a agregar será <strong>Visual C# &gt; Datos &gt;ADO.NET Entity Data\nModel</strong> le cambiamos el nobre del Modelo y le damos agregar.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/10-RestApi.png\" alt=\"addModelo\"></p>\n<p>En el asistente para Entity Data Model escogeremos el primero <strong>EF Designer\ndesde base de datos</strong></p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/11-RestApi.png\" alt=\"EFDesigner\"></p>\n<p>A continuación debemos de seleccionar la conexión de datos que vamos a ocupar,\nen este caso como es un proyecto nuevo no tenemos ninguna por lo que deberemos\nde crearla, para ello vamos a darle click al boton nueva conexión.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/12-RestApi.png\" alt=\"conexion1\"></p>\n<p>Se nos mostrara la pantalla de propiedades de la conexión, donde nos pide:</p>\n<ul>\n<li>Nombre Servidor</li>\n<li>Tipo de Autenticación</li>\n<li>Usuario</li>\n<li>Contraseña</li>\n<li>Nombre Base de Datos</li>\n</ul>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/13-RestApi.png\" alt=\"configConexion\"></p>\n<blockquote>\n<p>Nota: En caso de querer ocupar otro tipo de origen de datos debes de darle\nclick al boton cambiar y seleccionar el origen de datos que deseas. Una vez\nque haz llenado todos los campos requeridos con los datos que te conectaran\ncon tu base de datos puedes procedes a probar conexión y aceptar.</p>\n</blockquote>\n<p>Si nuestra cadena de conexión se ha creado correctamente el asistente nos\nregresara a la pantalla previa y llenara los datos que necesitamos, en este\npunto como este es un ejemplo seleccionaremos incluir datos confidenciales de\nnuestra cadena de conexión, pero lo ideal es que esta información no\npermitieramos para luego pasarlo a través de nuestro código, pero ese es tema\npara otro blog.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/14-RestApi.png\" alt=\"conexion2\"></p>\n<p>Luego seleccionamos la versión del Entity Framework en este caso la version 6.x.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/15-RestApi.png\" alt=\"selectEntity\"></p>\n<p>En la siguiente pantalla del asistente seleccionamos la base de datos y las\ntablas que vamos a utilizar, por ultimo tecleamos el nombre de nuestro modelo,\nen este caso <strong>POSmodel</strong> y haga clic en finalizar.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/16-RestApi.png\" alt=\"SelectDB\"></p>\n<blockquote>\n<p>Nota: 1) Puedes Pluralizar o singularizar el nombre de objeto generado:\nbásicamente, agregar o quitar <strong>&quot;s&quot;</strong> o es en los nombres de objeto. 2)\nIncluir una columna de clave externa en el modelo: esta propiedad se utiliza\npara incluir relaciones entre tablas.</p>\n</blockquote>\n<p>Una vez que lo haga, obtendrá una buena vista de sus tablas (detrás de escena).</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/17-RestApi.png\" alt=\"tablasModelo\"></p>\n<blockquote>\n<p>Nota: Asegurate en este momento de compilar tu proyecto, para que no te de\nproblemas más adelante.</p>\n</blockquote>\n<p>En nuestro proyecto AccesoDatos vamos a buscar el archivo app.Config, donde\nseleccionaremos y copiaremos la cadena de conexión a la base de datos.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/18-RestApi.png\" alt=\"appConfig\"></p>\n<p>En nuestro proyecto principal <strong>WebApi</strong> vamos a buscar el archivo\n<strong>Web.config</strong> y pegar la cadena de conexión copiada en el paso anterior.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/19-RestApi.png\" alt=\"webApiConexion\"></p>\n<p>A continuación agregaremos una referencia.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/20-RestApi.png\" alt=\"addRegerencia\"></p>\n<p>En la opción proyectos seleccionaremos el nombre del proyecto donde se encuentra\nla configuración de la base de datos, en este caso <strong>AccesoDatos</strong> .</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/21-RestApi.png\" alt=\"addReferencia2\"></p>\n<p>Puedes ver la referencia del proyecto en el apartado <strong>Referencias</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/22-RestApi.png\" alt=\"references\"></p>\n<h2 id=\"agregando-un-controlador\">Agregando un Controlador</h2>\n<p>Siempre en nuestro proyecto principal agregaremos un Controller como semuestra a\ncontinuación: <strong>Seleccionamos la carpeta &quot;Controller&quot; &gt; Click derecho sobre el\nproyecto &gt; Agregar &gt; Controlador.</strong></p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/23-RestApi.png\" alt=\"addController\"></p>\n<p>En la pantalla del asistente seleccionaremos <strong>Web API</strong> el tipo <strong>Controlador\nWeb Api 2 - Empty</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/24-RestApi.png\" alt=\"addController2\"></p>\n<blockquote>\n<p>Nota: En caso de que te salga un error incicando que no puede encontrar el\narchivo AccesoDatos.dll puedes seleccionar el proyecto AccesoDatos -&gt; Build -&gt;\nRebuild Solution.</p>\n</blockquote>\n<p>Si no te dio problemas puedes proceder a editar el nombre del controlador, en\neste caso vamos a ocupar <strong>ArticuloController</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/25-RestApi.png\" alt=\"addController3\"></p>\n<p>En el controllador que se acaba de crear agregaremos la siguiente línea\n<strong>&quot;private POSEntities Context = new POSEntities()&quot;</strong> que es la referencia de la\nconexión de la base datos.</p>\n<p>Al agregar esta linea se nos presente un error por que no detecta o no reconoce\nla referencia de POSEntities, para solucionarlo tenemos que agregar la\nreferencia del proyecto.</p>\n<p>Una solución sencilla es posicionarlos en POSEntities damos click al icono\n<img src=\"media/blog/CSharp/ASP-NET/RESTAPI/26-2-RestApi.png\" alt=\"icono\"> y este nos\ndesplegara un menu donde seleccionaremos <strong>&quot;using AccesoDatos;&quot;</strong></p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/26-RestApi.png\" alt=\"addUsingReferencia\"></p>\n<p>Si hemos realizado los pasos correctamente nuestra controlador deberia de verse\na como se muestra a continuación.\n<img src=\"media/blog/CSharp/ASP-NET/RESTAPI/26-1-RestApi.png\" alt=\"addUsingReferencia1\"></p>\n<h2 id=\"administrar-paquetes-nuget\">Administrar paquetes NuGet</h2>\n<p>Para poder continuar con este ejemplo necesitamos algunos paquetes o archivos\nDLL necesarios, para ellos vamos a hacer uso del Administrador de paquetes Nuget\nque nos ofrece Visual Studio.</p>\n<p>En nuestro proyecto WebAPI vamos a seleccionar Referencias &gt; Administrar\npaquetes NuGet...</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/27-RestApi.png\" alt=\"addPaquetesNuget\"></p>\n<p>En el administrador de paquetes en el apartado Examinar vamos a buscar el\npaquete <strong>EntityFramework</strong> y le damos instalar.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/28-RestApi.png\" alt=\"addPaquetesNuget1\"></p>\n<p>Al momento de la instalación se mostraran una ventana de Aceptación de\nLincencia, le damos Aceptar para poder continuar.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/28-1-RestApi.png\" alt=\"addPaquetesNuget2\"></p>\n<p>Se agregaran 2 referencia <strong>EntityFramework</strong> y <strong>EntityFramework.SqlServer</strong>.\nPuedes revisarlo en:</p>\n<ol>\n<li>Las referencias del proyecto.</li>\n<li>Apartado instalado del Administrador de paquetes Nuget.</li>\n<li>El paquete instalado muestra un icono en color verde.</li>\n<li>Al seleccionar el paquete en la parte derecha nos muestra la opción de\ndesinstalar.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/29-RestApi.png\" alt=\"addPaquetesNuget3\"></p>\n<p>En la sección de referencias del controlador vamos a eliminar la referencia\n<strong>using System.Net.Http</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/29-1-RestApi.png\" alt=\"addPaquetesNuget4\"></p>\n<h2 id=\"agregando-crud\">Agregando CRUD</h2>\n<p>En este punto vamos a agregar el CRUD que ocupara nuestra API-REST.</p>\n<p>La primera acción que vamos a crear es la de <strong>Consultar</strong> donde ocuparemos el\nmétodo <strong>GET</strong>, para ello agregaremos el siguiente código que realizara la\nconsulta de todos los registros de la tabla.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/apiGet.png\" alt=\"apiGet\"></p>\n<blockquote>\n<p>Nota: El nombre de la tabla Articulo que se ocupa en\n<strong><code>IEnumerable&lt;Articulo&gt;</code></strong> la podemos obtener consultando la referencia de\nnuestra conexión a la base de datos.</p>\n</blockquote>\n<p>Para retornar los valores filtrados por id deberiamos agregar el siguiente\ncódigo.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/apiGetid.png\" alt=\"apiGetid\"></p>\n<p>Tu código debería quedar de la siguiente forma.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/30-RestApi.png\" alt=\"crudConsulta\"></p>\n<p>La siguiente acción a realizar es para <strong>Crear</strong> un nuevo registro, en este caso\nvamos utilizar el método <strong>POST</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/apiPost.png\" alt=\"apiPost\"></p>\n<p>Tu código debería quedar de la siguiente forma.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/31-RestApi.png\" alt=\"crudPOST\"></p>\n<p>La siguiente acción a realizar nos permitira <strong>Actualizar</strong> nuestros registros,\nen este caso vamos utilizar el método <strong>PUT</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/apiPut.png\" alt=\"apiPut\"></p>\n<blockquote>\n<p>Nota: En caso de que te salga un error asegurate de tener agregada la\nreferencia <strong>System.Data.Entity</strong>.</p>\n</blockquote>\n<p>Tu código debería quedar de la siguiente forma.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/32-RestApi.png\" alt=\"crudPUT\"></p>\n<p>La siguiente acción a realizar nos permitira <strong>Eliminar</strong> nuestros registros, en\neste caso vamos utilizar el método <strong>Delete</strong>.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/apiDelete.png\" alt=\"apiDelete\"></p>\n<p>Tu código debería quedar de la siguiente forma.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/33-RestApi.png\" alt=\"crudDelete\"></p>\n<p>A continución ejecutaremos nuestra aplicación la cual nos abrira nuestro\nnavegador con la dirección de Localhost que nos mostrara la página principal de\nnuestra API-REST.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/34-RestApi.png\" alt=\"pagina\"></p>\n<p>En la página que se nos ha cargado, seleccionaremos el apartado API, aquí\npodemos visualizar los métodos activos en este caso el primero que se nos\nmuestra es el método GET.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/35-RestApi.png\" alt=\"paginaApi\"></p>\n<p>Para poder probar que lo que hemos hecho esta funcionando vamos consultar todos\nlos registros de la tabla, en nuestro navegador debemos teclear despues de\n<strong>localhost:puerto/</strong> <strong>api/articulo</strong>, quedando de la siguiente manera\n<strong>localhost/api/usuarios</strong>, si todo esta bien se visualizaran todos los\nregistros de la tabla en formato XML.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/35-1-RestApi.png\" alt=\"testApi\"></p>\n<blockquote>\n<p>Nota: En este ejemplo estamos ocupando la tabla Articulo tu tendras que\ncambiarla por las tablas que vas a ocupar ejemplo: api/usuarios, api/facturas,\napi/clientes, etc</p>\n</blockquote>\n<p>La salida de la información esta en formato XML para generarla en formato Json\ndebemos editar el archivo <strong>WebApiConfig.cs</strong> que se ubica en el proyecto\nprincipal WebAPI.</p>\n<p>Teclearemos el siguiente código que realizar la salida en formato Json y remueve\nla salida en formato XML.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/formatJson.png\" alt=\"formatJson\"></p>\n<p>Tu código debería quedar de la siguiente forma.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/35-2-RestApi.png\" alt=\"testApi\"></p>\n<p>Si volvemos a realizar la consulta de todos los registros veremos que la salida\nserá en formato Json.</p>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/35-3-RestApi.png\" alt=\"testApi\"></p>\n<h2 id=\"probando-api-rest-con-postman\">Probando API-REST con POSTMAN</h2>\n<p>Llegamos al final de esta publicación y en esta sección vamos a realizar la\nprueba final de nuestra API-REST.</p>\n<p>Lo primero que debemos realizar es ejecutar POSTMAN que previamente deberias\ntener instalado, si aun no lo tienes instalado te dejo el\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://www.postman.com/\">Link</a> para que te registres y descargues.</p>\n<h3 id=\"método-get-todos-los-registros\">MÉTODO GET (Todos los registros)</h3>\n<p>Para probar nuestro método GET con POSTMAN deberiamos de realizar los siguientes\npasos:</p>\n<ol>\n<li>Seleccionamos el método <strong>GET</strong>.</li>\n<li>Tecleamos la <strong>URL</strong> de nuestra API, en mi caso sería:\n(<code>https://localhost:44381/api/articulo</code>).</li>\n<li>Presionamos el botón <strong>SEND</strong>.</li>\n<li>En la parte inferior <strong>(Body)</strong> se visualizan todos los registros de la\ntabla.</li>\n<li>Se nos indica el stado de nuestra consulta <strong>Status: 200 ok</strong>.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/36-RestApi.png\" alt=\"testGET\"></p>\n<h3 id=\"método-post-agregar-un-nuevo-registro\">MÉTODO POST (Agregar un nuevo registro)</h3>\n<p>Para agregar nuevos registros en nuestra base de datos ocuparemos el método\nPOST.</p>\n<p>Siguiendo los pasos anteriores nos quedaria de la siguiente manera:</p>\n<ol>\n<li>Seleccionamos el método <strong>POST</strong>.</li>\n<li>Tecleamos la <strong>URL</strong> de nuestra API, en mi caso sería:\n(<code>https://localhost:44381/api/articulo</code>).</li>\n<li>En los parametros seleccionaremos <strong>Body &gt; raw &gt; Formato Json</strong>.</li>\n<li>Tecleremos los nuevos datos a agregar en formato Json</li>\n<li>Presionamos el botón <strong>SEND</strong>.</li>\n<li>En la parte inferior <strong>(Body)</strong> se visualizara el nuevo registros agregado a\nnuestra base de datos.</li>\n<li>Se nos indica el stado de nuestra consulta <strong>Status: 200 ok</strong>.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/39-RestApi.png\" alt=\"testPOST\"></p>\n<h3 id=\"método-put-modificando-un-registro\">MÉTODO PUT (Modificando un registro)</h3>\n<p>Para modificar o actualizar nuestros registro en base de datos ocuparemos el\nmétodo PUT.</p>\n<p>Siguiendo los pasos anteriores para actualizar un registro desde Postman\nrealizaremos los siguientes pasos:</p>\n<ol>\n<li>Seleccionamos el método <strong>PUT</strong>.</li>\n<li>Tecleamos la <strong>URL</strong> de nuestra API, en mi caso sería:\n(<code>https://localhost:44381/api/articulo/1</code>).</li>\n<li>En los parametros seleccionaremos <strong>Body &gt; raw &gt; Formato Json</strong>.</li>\n<li>Tecleremos los datos a cambiar en formato Json</li>\n<li>Presionamos el botón <strong>SEND</strong>.</li>\n<li>En la parte inferior <strong>(Body)</strong> se visualizan los registros ya actualizados.</li>\n<li>Se nos indica el stado de nuestra consulta <strong>Status: 200 ok</strong>.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/37-RestApi.png\" alt=\"testPUT\"></p>\n<h3 id=\"método-get-obtener-registros-filtrado-por-id\">MÉTODO GET (Obtener registros filtrado por id)</h3>\n<p>Tambien se puede consultar los cambios volviendo a ejecutar un método GET ya sea\nel de obtener todo o bien el método de filtrado por id.</p>\n<p>Para ello podemos realizar los siguientes pasos:</p>\n<ol>\n<li>Seleccionamos el método <strong>GET</strong>.</li>\n<li>Tecleamos la <strong>URL</strong> de nuestra API y le agregamos al final el id de nuestro\narticulo, en mi caso sería <code>articulo/1</code>:\n(<code>https://localhost:44381/api/articulo/1</code>).</li>\n<li>Presionamos el botón <strong>SEND</strong>.</li>\n<li>En la parte inferior <strong>(Body)</strong> se visualizara el registros de que\nseleccionado.</li>\n<li>Se nos indica el stado de nuestra consulta <strong>Status: 200 ok</strong>.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/36-1-RestApi.png\" alt=\"testGET1\"></p>\n<h3 id=\"método-delete-eliminar-registros\">MÉTODO DELETE (Eliminar registros)</h3>\n<p>Para eliminar los registros de nuestra base de datos ocuparemos el método\nDelete. Siguiendo los pasos anteriores nos quedaria de la siguiente manera:</p>\n<ol>\n<li>Seleccionamos el método <strong>DELETE</strong>.</li>\n<li>Tecleamos la <strong>URL</strong> de nuestra API y le agregamos al final el id de nuestro\narticulo que deseamos eliminar, en mi caso sería <code>articulo/17</code>:\n(<code>https://localhost:44381/api/articulo/17</code>).</li>\n<li>Presionamos el botón <strong>SEND</strong>.</li>\n<li>En la parte inferior <strong>(Body)</strong> se visualizara el registros eliminados.</li>\n<li>Se nos indica el stado de nuestra consulta <strong>Status: 200 ok</strong>.</li>\n</ol>\n<p><img src=\"media/blog/CSharp/ASP-NET/RESTAPI/38-RestApi.png\" alt=\"testDelete\"></p>\n<blockquote>\n<p>Nota: Recuerda que despues de utilizar los métodos POST, DELETE, PUT puedes\nocupar el método GET (Obtener Todos) ó el método GET(id) para consultar los\ncambios realizados.</p>\n</blockquote>\n<h2 id=\"conclusiones\">Conclusiones</h2>\n<p>Creo que este artículo se extendio pero era necesario, si realizaste el paso a\npaso no deberias de tener problemas y ahora tu API-REST puede ser utilizado en\ncualquier aplicación por el método HTTP.</p>\n<p>Recuerda que para este ejemplo ocupamos POSTMAN pero puedes ocupar cualquier\notra herramienta de testing para API REST tanto en versiones de escritorio como\nweb como por ejemplo: insomnia, Paw, Wizdler, etc, por nombrar algunas.</p>\n<p>Si te gustaria ver como publicar este proyecto en un servidor IISS o como\npodemos consumir nuestra API-REST desde un proyecto FrontEnd o algún otro tema\nque te gustaria ver dejame tu comentario con gusto lo leere y sacare un tiempo\npara responderte y escribirlo.</p>\n<p>Puedes descargar el proyecto desde mi repositorio en\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://github.com/erickmarcia/ASP.NET.git\">GitHub</a></p>\n<p>¡Listo para crear tu primera API-REST!</p>\n","date":"2021-06-05T23:52:00.000+00:00","feature_image":"media/blog/CSharp/ASP-NET/RESTAPI/Banner.jpg","excerpt":"","printDate":"June 5, 2021","printReadingTime":"13 min read"}