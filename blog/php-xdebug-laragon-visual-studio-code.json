{"title":"Php + XDebug + Laragon + Visual Studio Code!","slug":"php-xdebug-laragon-visual-studio-code","html":"<!-- ![Banner](media/blog/Php/xdebug/bannerPhpXdebug.png) -->\n\n<p>Como programador una de las opciones que menos me gusta pero que realmente es\nnecesario es el debug, mas en los casos cuando el desarrollo falla y no tienes\nni la minima idea de como resolverlo.</p>\n<p>Recién estoy llevando los cursos de la Especialidad de <strong>EDteam</strong> sobre Php con\nla profesora <strong>Yesi Days</strong>, por lo cual en este artículo no pretendo enseñarte\ncuales son los fundamentos de la depuración en Php, más bien como preparar el\nentorno para poder realizar la depuraciones de nuestro código por que realmente\npuede hacernos la vida más fácil.</p>\n<h2 id=\"xdebug\">Xdebug</h2>\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"https://xdebug.org/\">Xdebug</a> es una extensión de PHP que apunta a ayudar en el\nproceso de depuración de sus aplicaciones. Xdebug ofrece características como:</p>\n<ul>\n<li>Seguimiento automático de la pila en caso de error</li>\n<li>Función de registro de llamadas</li>\n<li>Mostrar características como la salida var_dump () mejorada y la información\nde cobertura de código.</li>\n</ul>\n<p>Xdebug es altamente configurable y adaptable a una variedad de situaciones. Por\nejemplo, los seguimientos de la pila (que son extremadamente útiles para\nmonitorear qué está haciendo su aplicación y cuándo) se pueden configurar a\ncuatro niveles de detalle diferentes. Esto significa que puede ajustar la\nsensibilidad de la salida de Xdebug ayudándole a obtener información granular\nsobre la actividad de su aplicación.</p>\n<p>Los seguimientos de pila le muestran dónde ocurren los errores, le permiten\nrastrear llamadas a funciones y detallar los números de línea de origen de estos\neventos. Todo lo cual es información fantástica para depurar su código.</p>\n<p>Puedes echar un vistazo link\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://xdebug.org/docs/install\">a la guía de instalación de Xdebug</a> que se\nofrece en la página oficial.</p>\n<h2 id=\"instalación-xdebug\">Instalación Xdebug</h2>\n<p>Para ello, necesitaremos descargar la versión de Xdebug, adecuada a nuestra\nversión de PHP. Hay que tener en cuenta que necesitaremos tener PHP 7.0 o\nsuperior.</p>\n<p>Empezaremos averiguando que versión de Xdebug nos corresponde para la\ninstalación de PHP de nuestra máquina. En este post utilizaremos Laragon pero\nfunciona igual si tienes instalado XAMPP el proceso es muy sencillo, tan solo\ntenemos que abrir el navegador y escribiremos en la barra de direcciones\nlocalhost, y en el menú de la página que aparecerá pulsaremos la opción de\nPHPInfo.</p>\n<p><img src=\"media/blog/Php/xdebug/1-localhostxdebug.png\" alt=\"XdebugPhpinfo\"></p>\n<h2 id=\"cómo-agregar-xdebug-a-laragon\">Cómo agregar Xdebug a Laragon</h2>\n<p>Si tienes problemas en cargar esta pantalla puedes realizar los siguientes\npasos:</p>\n<ul>\n<li>En la barra de tareas de windows dale click al icono de Laragon.</li>\n<li>Selecciona PHP</li>\n<li>En el menú desplegable selecciona Quick Setting.</li>\n<li>Selecciona xdebug.</li>\n</ul>\n<p><img src=\"media/blog/Php/xdebug/1-xdebug.png\" alt=\"LaragonXdebug\"></p>\n<p>Aparecerá una advertencia indicando si necesitamos ayuda para agregar Xdebug a\nLaragon.</p>\n<p><img src=\"media/blog/Php/xdebug/2-xdebug.png\" alt=\"LaragonXdebug2\"></p>\n<p>Nota: al aceptar la advertencia nos redireccionará al siguiente\n<a target=\"_blank\" rel=\"nofollow\" href=\"https://forum.laragon.org/topic/264/tutorial-how-to-add-xdebug-to-laragon\">Link</a>,\nen el cual nos muestra el método para agregar Xdebug a Laragon usando phpinfo()\ny asistente de Xdebug.</p>\n<h2 id=\"usando-de-phpinfo--y-asistente-de-xdebug\">Usando de phpinfo () y asistente de Xdebug</h2>\n<p><img src=\"media/blog/Php/xdebug/3-xdebug.png\" alt=\"LaragonXdebug3\"></p>\n<ol>\n<li><p>Copie todo el contenido de phpinfo():</p>\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"http://localhost/?Q=info\">http://localhost/?Q=info</a></p>\n<p><img src=\"media/blog/Php/xdebug/4-xdebug.png\" alt=\"LaragonXdebug4\"></p>\n<blockquote>\n<p>Tips: Puedes Seleccionar toda la información con solo presionar <strong>Ctrl +\nA</strong>.</p>\n</blockquote>\n</li>\n<li><p>Pegue los datos copiados al formulario en la página del Asistente de Xdebug:</p>\n<p><a target=\"_blank\" rel=\"nofollow\" href=\"http://localhost/?Q=info\">http://localhost/?Q=info</a></p>\n<p><img src=\"media/blog/Php/xdebug/5-xdebug.png\" alt=\"LaragonXdebug5\"></p>\n<blockquote>\n<p>Tips: Asegúrese de que al momento de pegar la información de phpInfo() en\nel formulario de Xdebug borrar los espacios al inicio y final.</p>\n</blockquote>\n</li>\n<li><p>Haga clic en <strong>&quot;Analyse my phpinfo() output.&quot;</strong></p>\n<p><img src=\"media/blog/Php/xdebug/6-xdebug.png\" alt=\"LaragonXdebug6\"></p>\n</li>\n<li><p>Una vez concluido estos pasos se nos muestra las instrucciones que\nnecesitaremos para usar la extensión Xdebug.</p>\n<p><img src=\"media/blog/Php/xdebug/7-xdebug.png\" alt=\"LaragonXdebug7\"></p>\n</li>\n<li><p>Tal y como nos sugiere debemos descargar la extensión de Xdebug (en mi caso\nseria la <strong>php_xdebug-2.6.1-7.2-vc15-x86_64.dll</strong>)</p>\n<p><img src=\"media/blog/Php/xdebug/8-xdebug.png\" alt=\"LaragonXdebug8\"></p>\n</li>\n<li><p>Mover o copiar la extensión descargada a la ruta que nos indica <strong>Extensions\ndirectory</strong> (en mi caso seria\n<strong>C:\\laragon\\bin\\php\\php-7.2.11-Win32-VC15-x64\\ext</strong>)</p>\n<p><img src=\"media/blog/Php/xdebug/9-xdebug.png\" alt=\"LaragonXdebug9\"></p>\n<blockquote>\n<p>Tips: Esta dirección puede variar según donde tengas instalado Laragon.</p>\n</blockquote>\n</li>\n<li><p>Ahora editaremos el fichero\n<strong>C:\\laragon\\bin\\php\\php-7.2.11-Win32-VC15-x64\\php.ini</strong>, y añadiremos al\nfinal las siguientes líneas.</p>\n<p><img src=\"media/blog/Php/xdebug/codigo.png\" alt=\"LaragonXdebugCodigo\"></p>\n<p><code>`[XDebug] xdebug.remote_enable = 1 xdebug.remote_autostart = 1 zend_extension=xdebug-2.6.1-7.2-vc15-x86_64`</code></p>\n<p><img src=\"media/blog/Php/xdebug/10-xdebug.png\" alt=\"LaragonXdebug10\"></p>\n</li>\n</ol>\n<blockquote>\n<p>Tips: el valor de zend_extension debe de ser el que nos indica la página de\nXdebug en sus instrucciones.</p>\n</blockquote>\n<p>Si tienes miedo de trastear el archivo de configuración de php.ini puedes\nrealizar los siguientes pasos explicados anterior mente el cual solo agregara la\nsiguiente linea <strong>zend_extension=xdebug-2.6.1-7.2-vc15-x86_64</strong> al archivo\nphp.ini:</p>\n<ol>\n<li>En la barra de tareas de windows dale click al icono de Laragon.</li>\n<li>Selecciona PHP</li>\n<li>En el menú desplegable selecciona Quick Setting.</li>\n<li>Selecciona Xdebug.</li>\n</ol>\n<p><img src=\"media/blog/Php/xdebug/1-xdebug.png\" alt=\"LaragonXdebug1\"></p>\n<ol start=\"8\">\n<li><p>Para verificar que todo el proceso anterior ha tenido éxito, consultaremos\notra vez la opción de PHPInfo, y comprobaremos que en el texto que sale al\nlado de la imagen de <strong>zendengine</strong>, aparece <strong>“with Xdebug”</strong> tal y como se\nmuestra en la siguiente imagen (otra forma de comprobarlo es buscar el texto\nxdebug en esta página).</p>\n<p><img src=\"media/blog/Php/xdebug/11-xdebug.png\" alt=\"LaragonXdebug11\"></p>\n</li>\n</ol>\n<hr>\n<h2 id=\"configurando-visual-studio-code-para-depurar-código-php\">Configurando Visual Studio Code para depurar código PHP</h2>\n<p>Una vez que hemos realizado la instalación de Xdebug ya podemos comenzar a\ndepurar nuestros código php con Visual Studio Code. Para ello debemos\nasegurarnos de tener instalado en este editor la extensión de “PHP Debug”.</p>\n<h2 id=\"instalación-de-phpdebug\">Instalación de PhpDebug</h2>\n<p>Las extensiones las buscaremos usando el icono de <strong>Extensiones</strong> del menú de la\nizquierda con forma cuadrada pulsando en la caja de texto <strong>Php Debug</strong> y la\ninstalaremos.</p>\n<p><img src=\"media/blog/Php/xdebug/1-PhpDebug.png\" alt=\"Phpdebug1\"></p>\n<blockquote>\n<p>Tips: Una vez instalado, para asegurarnos de que funciona, pulsaremos el botón\nazul Recargar. Y si nos aparece, también pulsaremos el botón con el mensaje\n<strong>“Volver a cargar Window”</strong>.</p>\n</blockquote>\n<h2 id=\"configuración-de-phpdebug-en-visual-studio-code\">Configuración de PhpDebug en Visual Studio Code</h2>\n<ol>\n<li><p>En este momento, es cuando abriremos nuestro proyecto (Archivo &gt; Abrir\nCarpeta).</p>\n</li>\n<li><p>Después, accederemos a la Vista de depuración:</p>\n<p><img src=\"media/blog/Php/xdebug/2-PhpDebug.png\" alt=\"Phpdebug2\"></p>\n</li>\n</ol>\n<blockquote>\n<p>Tips: Para abrir la vista de depuración, haga clic en el ícono de depuración\nen la barra de actividad en el lado de Código VS. También puede utilizar la\ncombinación de teclas <strong>Ctrl + Shift + D</strong>.</p>\n</blockquote>\n<ol start=\"3\">\n<li><p>Luego agregaremos una configuración para depurar PHP con Xdebug.</p>\n<p><img src=\"media/blog/Php/xdebug/4-PhpDebug.png\" alt=\"Phpdebug3\"></p>\n<blockquote>\n<p>Tips: En la parte superior hay un selector (2), y a su lado, un engranaje.</p>\n</blockquote>\n<blockquote>\n<p>Al pulsar en el selector nos pedirá que indiquemos el lenguaje a depurar\n(3).</p>\n</blockquote>\n</li>\n<li><p>Seleccionaremos el lenguaje a configurar en este caso Php.</p>\n<p><img src=\"media/blog/Php/xdebug/5-PhpDebug.png\" alt=\"Phpdebug4\"></p>\n</li>\n<li><p>Se abrirá el archivo <strong>launch.json</strong> y mostrara unas líneas de código por\ndefecto, que dejaremos tal cual</p>\n<p><img src=\"media/blog/Php/xdebug/6-PhpDebug.png\" alt=\"Phpdebug5\"></p>\n</li>\n<li><p>En nuestro código PHP, agregaremos puntos de interrupción haciendo click a\nla izquierda del número de línea. Veremos cómo aparecen puntitos rojos en\ncada línea esto son puntos de interrupción.</p>\n<p><img src=\"media/blog/Php/xdebug/7-PhpDebug.png\" alt=\"Phpdebug6\"></p>\n</li>\n<li><p>En el archivo setting.json agrega el siguiente código.</p>\n<p><img src=\"media/blog/Php/xdebug/configPHP.png\" alt=\"Phpdebug7\"></p>\n</li>\n<li><p>Pulsamos el botón de Iniciar depuración, y después abrimos el navegador con\nla dirección de nuestra página a depurar.</p>\n<p><img src=\"media/blog/Php/xdebug/9-PhpDebug.png\" alt=\"Phpdebug8\"></p>\n</li>\n</ol>\n<p>Cuando el navegador empiece a cargar la página, Visual Studio Code tomará el\ncontrol y nos permitirá ir depurando paso a paso usando las típicas herramientas\nde depuración.</p>\n<p>Al añadir la configuración para la depuración, Visual Studio Code habrá creado\nuna carpeta .vscode dentro de la carpeta de nuestro proyecto con la\nconfiguración de para la depuración. A partir de entonces, cada vez que abramos\nnuestro proyecto, tan solo tendremos que ir a la opción de depuración, poner\nalgún punto de interrupción y darle a la flecha verde. Si por error borramos esa\ncarpeta, tendremos que volver a repetir los pasos para volver a añadir la\nconfiguración.</p>\n<h2 id=\"conclusiones\">Conclusiones</h2>\n<p>¡Listos para depurar código PHP!</p>\n","date":"2019-01-03T07:08:02.000-07:00","excerpt":"","printDate":"January 3, 2019","printReadingTime":"6 min read"}